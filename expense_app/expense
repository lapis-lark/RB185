#! /usr/bin/env ruby

require "pg"
require 'date'
require 'io/console'

expenses=# SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';

class CLI
  attr_reader :application
  def initialize
    @application = ExpenseData.new
  end
  
  def run(args)
    case args[0]
    when 'list' then application.list_expenses
    when 'add' then application.add_expense(args[1], args[2], args[3])
    when 'search' then application.search_expenses(args[1])
    when 'delete' then application.delete_expense(args[1])
    when 'clear' then application.clear_expenses
    else display_help
    end
  end
  
  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  attr_reader :connection
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end
  
  def add_expense(amount, memo, date)
    date = Date.today if date.nil?
    abort "You must provide an amount and memo." unless amount && memo
    
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    connection.exec_params(sql, [amount, memo, date])
  end
  
  def list_expenses
    result = connection.exec_params("SELECT * FROM expenses ORDER BY created_on ASC", [])
    total = connection.exec_params("SELECT sum(amount) from expenses")[0]['sum']
    display_num_of_expenses(result.ntuples)
    print_table(result)
    display_total(total)
  end
  
  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE concat('%', $1::text, '%') ORDER BY created_on ASC"
    result = connection.exec_params(sql, [term])
    display_num_of_expenses(result.ntuples)
    print_table(result)
    display_total(result.field_values('amount').map(&:to_f).sum)
  end
  
  def delete_expense(id)
    ids = connection.exec_params("SELECT id FROM expenses").values.flatten
    abort "There is no expense with the id '#{id}'" unless ids.include?(id)

    sql = "DELETE FROM expenses WHERE id = $1::integer"
    connection.exec_params(sql, [id])
  end
  
  def clear_expenses
    puts "This will remove all expenses. Are you sure?(y/n)"
    loop do
      ans = $stdin.getch
      if ans == 'y'
        connection.exec_params("DELETE FROM expenses")
      elsif ans == 'n'
        abort "Delete operation aborted"
      else
        puts "invalid input. type either 'y' or 'n'"
      end
    end
  end
  
  private
  
  def print_table(result)
    result.each do |tuple|
    columns = [ tuple["id"].rjust(3),
                tuple["created_on"].rjust(10),
                tuple["amount"].rjust(12),
                tuple["memo"] ]

    puts columns.join(" | ")
    end
  end
  
  def display_num_of_expenses(num_of_expenses)
    puts case num_of_expenses
         when 0 then abort "There are no expenses."
         when 1 then "There is 1 expense."
         else "There are #{num_of_expenses} expenses."
         end
  end
  
  def display_total(total)
    puts '-' * 35
    puts ("Total" + sprintf('%.2f', total).rjust(26))
  end
  
  def setup_schema
    result = connection.exec_params("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';")
    if result[0]['count'] == '0'
      setup_commands = File.read('schema.sql')
      connection.exec_params(setup_commands)
    end
  end
end

CLI.new.run(ARGV)
